"""
    Leave One Out
    Arquivo avaliacao do metodos usando validacao cruzada  e o classificador knn ou svm
"""
from random import shuffle
import cv2
import numpy as np
from matplotlib import pyplot as plt
import cPickle
import glob
import argparse
import webbrowser


import os

import MomentosCromaticidade
import HistogramaColoridoRGB
import classificador




def carregar_imagens(listSet,metodo):
    dictClasses={'carettacaretta': 0, 'cheloniamydas': 1,'dermochelyscoriacea':2,'eretmochelysimbricata':3,'lepidochelysolivacea':4}
    loadListSet=[]
    loadListLabel=[]
    descritor=None
    if(metodo==1):
        descritor=MomentosCromaticidade
    else:
        descritor=HistogramaColoridoRGB
    for filename in listSet:
        #Descreve a imagem
        classe=filename.split(os.sep)[-2]
        vecCarac = descritor.descrever(filename)
        #adiciona o nome da classe ao fim para comparar posteriormente
        #print(classe +"\n")
        #print vecCarac
        loadListSet.append(vecCarac)
        loadListLabel.append(dictClasses[classe])
        #print np.array(vecCarac, dtype=np.float32)


    return (np.array(loadListSet, dtype=np.float32),np.array(loadListLabel, dtype=np.int32))



def k_fold_cross_validation(items, k, randomize=False):
    if randomize:
        items = list(items)
        shuffle(items)

    slices = [items[i::k] for i in xrange(k)]

    for i in xrange(k):
        validation = slices[i]
        training = [item
                    for s in slices if s is not validation
                    for item in s]
        yield training, validation


def gerarMatrixConfusao(preds,titulo):
    conf_arr=preds
    norm_conf = []
    for i in conf_arr:
        a = 0
        tmp_arr = []
        a = sum(i, 0)
        for j in i:
            tmp_arr.append((float(j)/float(a if a>0 else 1))*100)
        norm_conf.append(tmp_arr)

    fig = plt.figure()
    plt.clf()
    ax = fig.add_subplot(111)
    ax.set_aspect(1)
    #ax.tick_params(labelbottom='off',labeltop='on')
    res = ax.imshow(np.array(norm_conf), cmap="YlGn",interpolation='nearest')

    width = len(conf_arr)
    height = len(conf_arr[0])

    for x in xrange(width):
        for y in xrange(height):
            ax.annotate(str("%.2f" % (conf_arr[x][y]*1)), xy=(y, x),horizontalalignment='center', verticalalignment='center')

    #cb = fig.colorbar(res)
    #cb.ax.set_ylabel('Accuracy:'+str("%.2f" % accuracy)+'%')

    plt.xticks(np.arange(0,5), ['Caretta', 'Chelonia','Dermo','Eretmo','Lepido'])
    plt.yticks(np.arange(0,5), ['Caretta', 'Chelonia','Dermo','Eretmo','Lepido'])
    plt.ylabel('Real')
    plt.xlabel('Classificada')
    plt.title('Matriz de Confusao:'+titulo)

    #plt.xticks(range(width), alphabet[:width])
    #plt.yticks(range(height), alphabet[:height])
    plt.savefig("k_fold_result/"+titulo.replace(" ","")+'.png', format='png')


def getTabelaConfusao(preds):
    '''Recupera os dados de 'verdadeiro positivo','falso positivo','verdadeiro negativo','falso negativo'
        de cada uma das 5 classes e a retorna em um vetor, sedno o primeiro indice a classe e o segundo outro vetor com os dados
    '''
    resultados=[]
    for classeIndex in range(5):# 5 classes
        verdadeiro_positivo=preds[classeIndex][classeIndex]
        falso_positivo=0
        verdadeiro_negativo=0
        falso_negativo=0
        for linha in range(5):# 5 linhas
            for coluna in range(5): #5 colunas
                if(linha==classeIndex and coluna!=classeIndex):
                    falso_negativo+=preds[linha][coluna]
                elif(coluna==classeIndex and linha!=classeIndex):
                    falso_positivo+=preds[linha][coluna]
                elif(coluna!=classeIndex and linha!=classeIndex):
                    verdadeiro_negativo+=preds[linha][coluna]

        resultados.append((classeIndex,[verdadeiro_positivo,falso_positivo,verdadeiro_negativo,falso_negativo]))

    return resultados





def getClassificationPrecision(trainingSet,trainingResponse,testSet,testResponse,classificador):
    predictions=[]
    preds=[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]
    dictClasses={'carettacaretta': 0, 'cheloniamydas': 1,'dermochelyscoriacea':2,'eretmochelysimbricata':3,'lepidochelysolivacea':4}
    clf = None
    if(classificador==1):
        clf = KNN()
    else:
        clf = SVM()

    clf.train(trainingSet,trainingResponse)
    result = clf.predict(testSet)
    print result
    mask = result==testResponse
    correct = np.count_nonzero(mask)
    precisao= correct*100.0/result.size
    print "Precisao:",precisao
    return precisao,result



# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-m", "--metodo", required = True,help = "Metodo a ser usado 1- Momentos de Cromaticidade , 2-Histograma colorido")
ap.add_argument("-c", "--classificador", required = True,help = "Classificador a ser usado 1- KNN , 2-SVM")



args = vars(ap.parse_args())


allSet=[];

for filename in glob.glob("../samples/*/*_[0-9]_[0-9].jpg"):
    #Descreve a imagem
    classe=filename.split(os.sep)[-2]
    allSet.append(filename)
    #count=count+1

#allSet=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]
#allSet=allSet[0:2]
metodo=int(args["metodo"])
classificador=int(args["classificador"])
rest=fold=len(allSet)
acumulador=0
precisao=0
count=0

arquivo = open('k_fold_result/K_fold_leave_one_out_'+( "KNN" if classificador==1 else "SVM")+"_"+( "MoCr" if metodo==1 else "HiCo")+'.txt', 'w')

preds=[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]
dictClasses={'carettacaretta': 0, 'cheloniamydas': 1,'dermochelyscoriacea':2,'eretmochelysimbricata':3,'lepidochelysolivacea':4}
dictClassesIndex={0:'carettacaretta', 1:'cheloniamydas', 2:'dermochelyscoriacea',3:'eretmochelysimbricata',4:'lepidochelysolivacea'}


for train,test in k_fold_cross_validation(allSet, fold, True):
    #print "training:",train
    #print "test:",test
    trainingSet,trainingResponse=carregar_imagens(train,metodo)
    testSet,testResponse=carregar_imagens(test,metodo)
    precisao,result=getClassificationPrecision(trainingSet,trainingResponse,testSet,testResponse,classificador)
    for index in range(len(result)):
        indiceClassePredita=result[index]
        indiceClasseReal=testResponse[index]
        preds[indiceClasseReal][indiceClassePredita]+=1

    #print len(testSet)
    arquivo.write("%s\n\n" % train)
    arquivo.write("%s\n\n" % test)
    arquivo.write("Verdadeiro:%s\n\n" % testResponse)
    arquivo.write("Classificado:%s\n\n" % result)
    rest=rest-1
    print "resta:",rest


arquivo.write("Predicoes:%s\n\n" % preds)

tabelaConfusao=getTabelaConfusao(preds)
print(tabelaConfusao)
for index in range(5):
    tabelaClasse=tabelaConfusao[index]
    classeNome=dictClassesIndex[tabelaClasse[0]]
    verdadeiro_positivo,falso_positivo,verdadeiro_negativo,falso_negativo=tabelaClasse[1]
    arquivo.write("%s:" % classeNome)
    arquivo.write("%s\n\n" % tabelaClasse[1])




arquivo.close()

titulo="Leave One Out "+( "Momentos de Cromaticidade" if metodo==1 else "Histograma Colorido")+"-> "+( "KNN" if classificador==1 else "SVM")
gerarMatrixConfusao(preds,titulo)
